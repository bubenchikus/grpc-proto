// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/proto/grpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_ImageUpload_FullMethodName = "/proto.Service/ImageUpload"
	Service_ImageGet_FullMethodName    = "/proto.Service/ImageGet"
	Service_ListGet_FullMethodName     = "/proto.Service/ListGet"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	ImageUpload(ctx context.Context, opts ...grpc.CallOption) (Service_ImageUploadClient, error)
	ImageGet(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (Service_ImageGetClient, error)
	ListGet(ctx context.Context, in *ListGetRequest, opts ...grpc.CallOption) (*ListGetResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ImageUpload(ctx context.Context, opts ...grpc.CallOption) (Service_ImageUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_ImageUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceImageUploadClient{stream}
	return x, nil
}

type Service_ImageUploadClient interface {
	Send(*ImageUploadRequest) error
	CloseAndRecv() (*ImageUploadResponse, error)
	grpc.ClientStream
}

type serviceImageUploadClient struct {
	grpc.ClientStream
}

func (x *serviceImageUploadClient) Send(m *ImageUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceImageUploadClient) CloseAndRecv() (*ImageUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) ImageGet(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (Service_ImageGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_ImageGet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceImageGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ImageGetClient interface {
	Recv() (*ImageGetResponse, error)
	grpc.ClientStream
}

type serviceImageGetClient struct {
	grpc.ClientStream
}

func (x *serviceImageGetClient) Recv() (*ImageGetResponse, error) {
	m := new(ImageGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) ListGet(ctx context.Context, in *ListGetRequest, opts ...grpc.CallOption) (*ListGetResponse, error) {
	out := new(ListGetResponse)
	err := c.cc.Invoke(ctx, Service_ListGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	ImageUpload(Service_ImageUploadServer) error
	ImageGet(*ImageGetRequest, Service_ImageGetServer) error
	ListGet(context.Context, *ListGetRequest) (*ListGetResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) ImageUpload(Service_ImageUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method ImageUpload not implemented")
}
func (UnimplementedServiceServer) ImageGet(*ImageGetRequest, Service_ImageGetServer) error {
	return status.Errorf(codes.Unimplemented, "method ImageGet not implemented")
}
func (UnimplementedServiceServer) ListGet(context.Context, *ListGetRequest) (*ListGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGet not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_ImageUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).ImageUpload(&serviceImageUploadServer{stream})
}

type Service_ImageUploadServer interface {
	SendAndClose(*ImageUploadResponse) error
	Recv() (*ImageUploadRequest, error)
	grpc.ServerStream
}

type serviceImageUploadServer struct {
	grpc.ServerStream
}

func (x *serviceImageUploadServer) SendAndClose(m *ImageUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceImageUploadServer) Recv() (*ImageUploadRequest, error) {
	m := new(ImageUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_ImageGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ImageGet(m, &serviceImageGetServer{stream})
}

type Service_ImageGetServer interface {
	Send(*ImageGetResponse) error
	grpc.ServerStream
}

type serviceImageGetServer struct {
	grpc.ServerStream
}

func (x *serviceImageGetServer) Send(m *ImageGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_ListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ListGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListGet(ctx, req.(*ListGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGet",
			Handler:    _Service_ListGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImageUpload",
			Handler:       _Service_ImageUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImageGet",
			Handler:       _Service_ImageGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/grpc.proto",
}
